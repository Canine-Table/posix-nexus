#nx_include "./trig.d/nex-sine.bc"
#nx_include "./trig.d/nex-cosine.bc"
#nx_include "./trig.d/nex-tangent.bc"

# id: 0 = sin, 1 = cos, 2 = tan
define nx_sign_trig(x, id) {
	auto r, i, q
	i = nx_rj_pi(16)
	r = nx_mod2pi(x)

	# Determine quadrant
	if (r < i / 2) {
		q = 1
	} else if (r < i) {
		q = 2
	} else if (r < 3 * i / 2) {
		q = 3
	} else {
		q = 4
	}
	# Sign table
	if (id == 0) { # sin
		if (q == 1 || q == 2)
			return 1
		return -1
	}
	if (id == 1) { # cos
		if (q == 1 || q == 4)
			return 1
		return -1
	}
	if (id == 2) { # tan
		if (q == 1 || q == 3)
			return 1
		return -1
	}
	return 0 # fallback impurity
}

define nx_r_pth(x, y) {
	return nx_nr_sqrt(nx_pow(x, 2) + nx_pow(y, 2))
}

# very slow
define nx_lz_pi(x) {
	auto k, r, s
	r = 0
	s = 1
	for (k = 0; k < x; ++k) {
		r = r + s * (1 / (2 * k + 1))
		s = -s
	}
	return 4 * r
}

define nx_rj_pi(x) {
	auto k, r, n, d, t
	r = 0
	for (k = 0; k < x; ++k) {
		n = nx_fact(4 * k) * (1103 + 26390 * k)
		d = nx_pow(nx_fact(k), 4) * nx_pow(396, 4 * k)
		t = n / d
		r = r + t
	}
	return 9801 / (2 * nx_nr_sqrt(2) * r)
}

