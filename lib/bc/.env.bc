


define nx_fld_ang(x) {
	auto r, i
	i = nx_rj_pi(16)
	r = nx_mod2pi(x)
	if (r > i)
		r = r - i
	if (r > i / 2)
		r = i - r
	return r
}

define nx_rad_ang_cos(x) {
    x = nx_mod(x, 360)
    if (x < 0)
        x = x + 360
    if (x > 180)
        x = 360 - x
    if (x > 90)
        x = 180 - x
    return x
}

define nx_fld_ang_cos(x) {
    auto r, i
    i = nx_rj_pi(16)
    r = nx_mod2pi(x)
    if (r > i)
        r = 2 * i - r
    if (r > i / 2)
        r = i - r
    return r
}

define nx_rad_ang(x) {
	auto s
	x = nx_mod(x, 360)
	s = 1
	if (x < 0)
		x = x + 360
	if (x > 180) {
		x = x - 180
		s = -1
	}
	if (x > 90)
		x = 180 - x
	return x * s
}









define pr_nx_bn_tan(x, y) {
    auto i, r, b, n, d, s, c
    r = 0
    s = 1
    for (i = 1; i <= y; ++i) {
	b = nx_bern(2 * i)
	n = nx_pow(2, 2 * i) * (nx_pow(2, 2 * i) - 1) * b
	d = nx_fact(2 * i)
	c = s * n / d
	r = r + c * nx_pow(x, 2 * i - 1)
	s = -s
    }
    return r
}

define pr_nx_ts_tan(x, y) {
	return pr_nx_ts_sin(x, y) / pr_nx_ts_cos(x, y)
}

define r_nx_ts_tan(x) {
	return pr_nx_ts_tan(x, 100)
}


define nx_sin(x, terms) {
    auto n, sum, sign
    sum = 0
    sign = -1
    for (n = 0; n < terms; ++n) {
        sum = sum + sign * nx_esp(x, 2 * n + 1)
        sign = -sign
    }
    return sum
}

